class User:
  - userId: int
  - reputation: string
  - questions: []Question
  - answers: []Answer

class UserService:
  - users: map[string]User
  + addQuestionsToUser(User,Question)
  + addAnswersToUser(User,Answer)

class Question:
  - qid: int
  - author: User
  - content: string
  - votes: int
  - comments: []Comment
  - tags: []string
  + addComments(Servicable,comment)
  + downVote(Servicable)
  + upVote(Servicable)

class QuestionService:
  - questions: map[qid]Question
  + addAnswerToQuestion(qid, Answer)
  
class Answer:
  - aid: int
  - author: User
  - content: string
  - votes: int
  - comments: []Comment
  + addComments(Servicable,comment)
  + downVote(Servicable)
  + upVote(Servicable)

class AnswerService:
  - answers: map[aid]Answer
  
class Comment:
  - cid: int
  - author: User
  - content: string

interface Servicable:
  + addComments(comment)
  + downVote()
  + upVote()

enum Topic:
  - Question
  - Answer

class StackOverFlow:
  - qs: QuestionService()
  - as: AnswerService()
  - us: UserService()
  + addQuestion(qid:string, author:string, content:string)
  + addAnswer(qid:string, aid:string, author:string, content:string)
  + searchQuestionByTag(tags)
  + addComments(topic:Topic, content:string)
  + downVote(topic:Topic)
  + upVote(topic:Topic)


Patterns : 
1. Strategy Pattern for searchQuestion
2. Builder Pattern for questions
3. Factory Pattern for creation of Post where Post can be both Question and Answer
