class User:
  - username: string
  - password: string

class UserService:
  - users: map[username string]User
  + registerUser(username string, password string): User
  + loginUser(username string, password string): bool

class AuctionItem:
  - aid: int
  - name: string
  - description: string
  - startingPrice: int
  - expirationTime: date
  - bids: []Bid

class AuctionItemService:
  - auctionItems: map[aid string]AuctionItem
  + createAuctionItem(aid int,name string,description string,startingPrice int,expirationTime string): AuctionItem
  + searchAuctionItem(name string): []AuctionItem
  + browseAuctionItems(): []AuctionItem


class Bid:
  - bidId: int
  - item: AuctionItem
  - user: User 
  - priceQuoted: int

class BidService:
  - bids: map[bidId string]Bid
  + createBid(bidId int, item AuctionItem, user User, priceQuoted int): Bid
  + getHighestBidder(): Bid


class AuctionService:
  + registerUser(username, password)
  + loginUser(username, password)
  + createAuctionItem(aid int,name string,description string,startingPrice int,expirationTime string)
  + createBid(bidId int, item AuctionItem, user User, priceQuoted int)

  
1. Strategy Pattern for Searching
2. Observer Pattern for notifying users
3. Concurrent process of checking on an AuctionItem so that when it end, the highest bidder should be declared as the winner.
